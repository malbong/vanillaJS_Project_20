@import url("https://fonts.googleapis.com/css2?family=Lato&display=swap");

:root {
  --nav-color: #30326b;
  --header-color: #30326b;
  --bodrer-color: rgba(200, 200, 200, 0.1);
  --icon-color: #4f6b30;
  --white: #f7f7f7;
  --signup-color: #4f6b30;
  --toggle-color: #20224d;
}

* {
  box-sizing: border-box;
}

a {
  text-decoration: none;
  color: var(--white);
}

body {
  margin: 0;
  padding: 0;
  font-family: "Lato", sans-serif;

  min-height: 100vh;
}

nav {
  background-color: var(--nav-color);
  border-right: 1px solid var(--bodrer-color);

  width: 200px;

  position: fixed;
  left: 0;
  top: 0;
  z-index: 100;
  height: 100%;

  transform: translateX(-200px);
  transition: transform 0.3s linear;
}

nav.nav__active {
  transform: translateX(0px);
}

nav ul {
  margin: 0;
  padding: 0;
}

nav .logo {
  text-align: center;
  padding: 2rem 0;
  border-bottom: 2px solid var(--bodrer-color);
}
nav .logo a {
  display: block;
}
nav .logo a i {
  font-size: 3rem;
  color: var(--icon-color);
}
nav ul li {
  padding: 1.25rem;
  border-bottom: 2px solid var(--bodrer-color);
}
nav ul li a:hover {
  text-decoration: underline;
}

.container {
  transition: margin-left 0.3s linear;
}

.container.nav__active {
  margin-left: 200px;
}

header {
  background-color: var(--header-color);
  color: var(--white);
  width: 100%;
  text-align: center;
  padding: 2rem;
  font-size: 1.25em;
  position: relative;
}
header h1 {
  margin: 0;
}
header p {
  margin: 2rem 0;
}

header button {
  border-radius: 0.5rem;
  font-size: 1.25rem;
  color: var(--white);
  cursor: pointer;
}
header button:active {
  transform: scale(1.1);
}
header .signupBtn {
  background-color: var(--signup-color);
  border: 2px solid var(--signup-color);
  padding: 0.75rem 1.75rem;
}

header .toggleBtn {
  position: absolute;
  top: 1rem;
  left: 1rem;
  background-color: var(--toggle-color);
  border: 2px solid var(--toggle-color);
  padding: 0.5rem 1rem;
}

main {
  max-width: 800px;
  margin: 0 auto;
  padding: 1rem;
}

/*
display: flex하면 container 내부의 item이 가로폭을 "화면 사이즈"만큼 채움
-> margin이 있어도 가로휠이 생기지 않는다는 뜻
.item {
  margin-left: 1000px;
  width: 100%
  background-color: red;
}

기본적으로 block 요소는 margin을 포함하여 화면 사이즈만큼 채우고 가로휠 생기지 않음
#block_box {
  margin: 1000px;
}

가로휠이 생기는 경우
#block_box {
  margin: 1000px;
  width: 100% or 100vh;
}

flex container와 items의 height: 100%
-> items-row로 있을 때
- container가 min-height:100vh 이면 item은 자동으로 100vh stretch함
- 하지만 item에 height:100% 을 하면 height가 적용되지 않는 문제가 존재
- 그냥 두면 height가 100vh니까 그냥 사용하면 됨
cf) 근데 flex container가 position:absolute같이 박스의 요소를 변경시킨다면, 그땐 height같은 것이 잘 먹을 것

%와 viewport 그리고 px을 섞어쓸 때 나오는데, 규칙을 만들어야 할 듯
화면 요소로 계산해야 하는 큰 컨테이너 같은 경우 viewport 사용할 것
-> 기본적인 body같은 높이: min-height: 100vh;
-> flex container에서 width/height는 일반적인 px, % 계산 방식과 다름 -> 재조정한다고 함
.boxA {
  width: 200px;
  background-color: red;
}
.boxB {
  width: 100%;
  background-color: blue;
}
// 이러면 가로 스크롤이 생기는 것도 아니고, boxA가 200px을 가지는 것도 아님

flex container에서 width px 지정 후 다른 박스가 나머지 공간 차지하기
.boxA {
  width: 200px
}
.boxB {
  flex: 1
}
// flex: 1 -> grow 1, shrink 1 basis 0 을 의미
// flex-grow 남는 공간 차지
// flex-shrink 부족한 공간에서 줄어드는 비율
// flex-basis 초기 크기

width VS flex-basis 의 차이
width 너비를 직접 지정
flex-basis 컨테이너 내에서 아이템의 초기 크기 -> 크기를 결정하는 단계에서 출발크기를 나타내는 것 -> 변경될 수 있음

hover시 text-decoration: underline

display: none VS display: block
visibility: hidden VS visibility: visible

transform :
translate 
transition 

Q) 만들어보기
1) 원문 덮으면서 navbar나오기 -> 원문이 가려짐
2) 원문 전체가 "이동"하면서 navbar 나오기 -> 가로휠 생김
3) 원문 전체가 폭을 수정하고 navbar 나오기 -> flexible
*/
